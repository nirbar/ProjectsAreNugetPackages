<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <Import Project="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).tasks" Condition="Exists('$(MSBuildThisFileDirectory)$(MSBuildThisFileName).tasks')"/>
  <Import Project="$(MSBuildThisFileDirectory)\..\..\MSBuildTasks.1.5.0.235\build\MSBuildTasks.targets"/>

  <Target Name="ConvertProjectRefToNugetPackage">
    <ConvertProjectRefToNugetPackage SolutionDir="$(SolutionDir)"
                                     Projects="$(MSBuildProjectFile)"
                                     AllProjects="$(AllProjects)"
                                     PackageIdPrefix="$(NugetIdPrefix)"
                                     PackageVersion="$(NuspecVersion)"/>
  </Target>

  <Target Name="ResolveDependants">
    <ResolveDependants DependecyProject="$(MSBuildProjectFile)"
                       AllProjects="@(AllProjects)"
                       PackageIdPrefix="$(NugetIdPrefix)">
      <Output TaskParameter="DependantProjectsBuildOrdered" ItemName="ProjectBuildOrder" />
    </ResolveDependants>
  </Target>

  <Target Name="NugetInstallUpdate" Condition="Exists('$(MSBuildProjectDirectory)\packages.config')">
    <NuGetInstall Package="$(MSBuildProjectDirectory)\packages.config" ToolPath="$(NugetToolPath)" SolutionDirectory="$(SolutionDir)" PreRelease="$(NugetUpdatePreRelease)" ConfigFile="$(NugetConfig)" ContinueOnError='true' />

    <XmlPeek XmlInputPath="$(MSBuildProjectDirectory)\packages.config" Query='//package[starts-with(@id, "$(NugetIdPrefix)")]/@id'>
      <Output TaskParameter="Result" ItemName="AnyLocalPackage"/>
    </XmlPeek>  
    <NuGetUpdate Package="$(MSBuildProjectDirectory)\packages.config" ConfigFile="$(NugetConfig)" ToolPath="$(NugetToolPath)" PreRelease="$(NugetUpdatePreRelease)" Source="@(NugetUpdateSource)" Condition="@(AnyLocalPackage->Count()) > 0"/>
  </Target>

  <!-- Upload built nuget package to version repo -->
  <Target Name="UploadNugetPackage">
    <PropertyGroup>
      <NugetPackage Condition="'$(NuspecVersionSuffix)'!=''">$(NugetBuildFolder)\$(NugetIdPrefix)$(MSBuildProjectName).$(NuspecVersion)-$(NuspecVersionSuffix).nupkg</NugetPackage>
      <NugetPackage Condition="'$(NuspecVersionSuffix)'==''">$(NugetBuildFolder)\$(NugetIdPrefix)$(MSBuildProjectName).$(NuspecVersion).nupkg</NugetPackage>
    </PropertyGroup>
    <Exec Command='"$(NugetToolPath)\Nuget.exe" add "$(NugetPackage)" -ConfigFile "$(NugetConfig)" -Source "$(NugetSource)"' Condition="Exists('$(NugetPackage)')"/>
  </Target>

  <!-- Create .nuspec file if missing -->
  <Target Name="_EnsureNugetSpec" AfterTargets="Build" Condition="'$(BuildNugetPackage.ToLower())'=='true' And !Exists('$(NuSpecPath)')">
    <PropertyGroup>
      <NuspecIn Condition="'$(MSBuildProjectExtension)'=='.vcxproj' Or '$(MSBuildProjectExtension)'=='.vcproj'">$(MSBuildThisFileDirectory)\NativeProject.nuspec.xml</NuspecIn>
      <NuspecIn Condition="'$(MSBuildProjectExtension)'=='.csproj' Or '$(MSBuildProjectExtension)'=='.vbproj' Or '$(CLRSupport)'=='true'">$(MSBuildThisFileDirectory)\NetProject.nuspec.xml</NuspecIn>
    </PropertyGroup>
    <XslTransformation XmlInputPaths="$(NuspecIn)" XslInputPath="$(MSBuildThisFileDirectory)Nuspec.xslt" OutputPaths="$(NuSpecPath)" Parameters="&lt;Parameter Name='packagesConfigPath' Value='$(MSBuildProjectDirectory)\packages.config'/&gt;" UseTrustedSettings="true"/>
  </Target>

  <!-- Pack nuget with parameters -->
  <ItemGroup>
    <NugetPackProperty Include="Configuration=$(Configuration)"/>
    <NugetPackProperty Include="id=$(NugetIdPrefix)$(MSBuildProjectName)"/>
    <NugetPackProperty Include="prefix=$(NugetIdPrefix)"/>
    <NugetPackProperty Include="title=$(NugetManufacturer) $(MSBuildProjectName)"/>
    <NugetPackProperty Include="author=$(NugetManufacturer)"/>
    <NugetPackProperty Include="projectUrl=$(MSBuildProjectName)"/>
    <NugetPackProperty Include="description=$(NugetManufacturer) $(MSBuildProjectName)"/>
    <NugetPackProperty Include="OutDir=$(OutDir.Replace('\\', '\'))"/>
    <NugetPackProperty Include="OutDirLib=$(OutDirLib.Replace('\\', '\'))"/>
    <NugetPackProperty Include="IntDir=$(IntDir.Replace('\\', '\'))"/>
    <NugetPackProperty Include="RootDir=$(SolutionDir.Replace('\\', '\'))"/>
    <NugetPackProperty Include="ProjectName=$(MSBuildProjectName)"/>
    <NugetPackProperty Include="MyDir=$(MSBuildThisFileDirectory)"/>
  </ItemGroup>

  <Target Name="CreateNugetPackage" AfterTargets="_EnsureNugetSpec" Condition="'$(BuildNugetPackage.ToLower())'=='true'">
    <Copy DestinationFiles="$(IntDir)$(NugetIdPrefix)$(MSBuildProjectName).targets" SourceFiles="$(MSBuildThisFileDirectory)\native-nuget-targets.xml" Condition="'$(MSBuildProjectExtension)'=='.vcxproj'" />
    <Copy DestinationFiles="$(IntDir)$(NugetIdPrefix)$(MSBuildProjectName).targets" SourceFiles="$(MSBuildThisFileDirectory)\net-nuget-targets.xml" Condition="'$(MSBuildProjectExtension)'!='.vcxproj'" />
    <FileUpdate Files="$(IntDir)$(NugetIdPrefix)$(MSBuildProjectName).targets" Regex="!id!" ReplacementText="$(MSBuildProjectName.Replace('.','_'))" />
    <NuGetPack File="$(NuSpecPath)" OutputDirectory="$(NugetBuildFolder)" Version="$(NuspecVersion)" Suffix="$(NuspecVersionSuffix)" Build="false" Properties="@(NugetPackProperty);VersionTags=@(VersionTag->'%(Identity)', ' ') $(VersionTag)" IncludeReferencedProjects="false" BasePath="$(MSBuildProjectDirectory)" ExcludeEmptyDirectories="false" ToolPath="$(NugetToolPath)"/>
  </Target>
</Project>